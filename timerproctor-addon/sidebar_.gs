function checkMultipleAccountIssue(initiator) {
  var userEmailAddress = Session.getEffectiveUser().getEmail() 
      
  if (initiator) {
    if (initiator != userEmailAddress) {
      console.error({
        message: "Client side calls initiated from wrong account",
        initiator: initiator,
        effectiveUser: userEmailAddress
      })
      var errorMessage = "‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ<br>";
      errorMessage+= "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ " + userEmailAddress
      errorMessage+= " ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ TimerProctor ‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ " +initiator
      throw new Error(errorMessage)
    }
  }
}

function getSettings() {
  var settings = PropertiesService.getDocumentProperties().getProperties()

  const form = FormApp.getActiveForm()
  const textItems = form.getItems(FormApp.ItemType.TEXT)
  settings.textItems = []
  for (var i = 0; i < textItems.length; i++) {
    settings.textItems.push({
      title: textItems[i].getTitle(),
      id: textItems[i].getId()
    })
  }
  return settings
}

function saveSettings(settings) {
  if (settings.autofillEmail && !settings.autofillEmailField)
    settings.autofillEmail = false
  if (settings.autofillTesterID && !settings.autofillTesterIDField)
    settings.autofillTesterID = false
    
  updateLinkedSettings(settings)
  
  return getSettings()
}

function addEmailField() {
  const form = FormApp.getActiveForm()
  
  const textItems = form.getItems(FormApp.ItemType.TEXT)
  if (textItems.some(item => item.getTitle() === '‡∏≠‡∏µ‡πÄ‡∏°‡∏•')) {
    throw new Error('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ [‡∏≠‡∏µ‡πÄ‡∏°‡∏•] ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
  }
  
  const field = form.addTextItem()  
  
  field.setTitle('‡∏≠‡∏µ‡πÄ‡∏°‡∏•')
  field.setRequired(true)
  field.setHelpText('üö´ ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö!! üö´\r\n‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô TimerProctor ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏à‡∏∞‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥')
  const validation = FormApp.createTextValidation()
    .setHelpText('‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
    .requireTextIsEmail()
    .build()
  field.setValidation(validation)
 
  form.moveItem(field.getIndex(), 0)
  
  const settings = {
    autofillEmail: true,
    autofillEmailField: field.getId()
  }
  
  updateLinkedSettings(settings)
  
  return getSettings()
}


function addTesterIDField() {
  const form = FormApp.getActiveForm()
  
  const textItems = form.getItems(FormApp.ItemType.TEXT)
  if (textItems.some(item => item.getTitle() === '‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß')) {
    throw new Error('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ [‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß] ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
  }
  
  const field = form.addTextItem()  
  
  field.setTitle('‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß')
  field.setHelpText('üö´ ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö!! üö´\r\n‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô TimerProctor ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏à‡∏∞‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥')
 
  form.moveItem(field.getIndex(), 0)
  
  const settings = {
    autofillTesterID: true,
    autofillTesterIDField: field.getId()
  }
  
  updateLinkedSettings(settings)
  
  return getSettings()
}
